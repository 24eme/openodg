drev_index:
  url: /drev
  param: { module: drev, action: index }

drev_societe_choix_etablissement:
  url: /drev/societe/:identifiant/choix-etablissement
  param: { module: drev, action: societeChoixEtablissement }
  class: EtablissementRoute
  options:
    model:    Societe
    type:     object
  requirements:
    sf_method: [get, post]

drev_request_dr:
  url: /drev/dr/request
  param: { module: drev, action: requestDR }

drev_push_dr:
  url: /drev/dr/push
  param: { module: drev, action: pushDR }

drev_pull_dr:
  url: /drev/dr/pull
  param: { module: drev, action: pullDR }

drev_create:
  url: /drev/creation/:identifiant
  param: { module: drev, action: create }
  class: EtablissementRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

drev_create_papier:
  url: /drev/creation-papier/:identifiant
  param: { module: drev, action: createPapier }
  class: EtablissementRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

drev_edit:
  url: /drev/edition/:id
  param: { module: drev, action: edit }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_delete:
  url: /drev/suppression/:id
  param: { module: drev, action: delete }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_devalidation:
  url: /drev/devalidation/:id
  param: { module: drev, action: devalidation }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_dr:
  url: /drev/dr/:id
  param: { module: drev, action: dr }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_scrape_dr:
  url: /drev/scrape_dr/:id
  param: { module: drev, action: scrapeDr }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_dr_upload:
  url: /drev/dr_upload/:id
  param: { module: drev, action: drUpload }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_dr_recuperation:
  url: /drev/dr-recuperation/:id
  param: { module: drev, action: drRecuperation }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_dr_import:
  url: /drev/dr-import/:id
  param: { module: drev, action: drImport }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_document_douanier:
  url: /drev/document_douanier/:id
  param: { module: drev, action: documentDouanier }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_exploitation:
  url: /drev/exploitation/:id
  param: { module: drev, action: exploitation }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_denomination_auto:
  url: /drev/denomination-auto/:id
  param: { module: drev, action: denominationAuto }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_revendication_ajout:
  url: /drev/revendication/:id/ajout
  param: { module: drev, action: revendicationAjoutProduit }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_revendication_produit_denomination_auto:
  url: /drev/revendication/:id/produit/:hash/denomination-auto
  param: { module: drev, action: revendicationProduitDenominationAuto }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_revendication_superficie:
  url: /drev/revendication_superficie/:id/:appellation
  param: { module: drev, action: revendicationSuperficie, appellation: 0 }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_revendication_cepage_suppression:
  url: /drev/revendication/:id/cepage/:hash/suppression
  param: { module: drev, action: revendicationCepageSuppressionProduit }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]


drev_revendication_reset:
  url: /drev/revendication/:id/reset
  param: { module: drev, action: resetVolumes, appellation: 0 }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_revendication:
  url: /drev/revendication/:id/:appellation
  param: { module: drev, action: revendication, appellation: 0 }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_vci:
  url: /drev/vci/:id/:appellation
  param: { module: drev, action: vci, appellation: 0 }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_lots:
  url: /drev/lots/:id/:appellation
  param: { module: drev, action: lots, appellation: 0 }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_lot_delete:
  url: /drev/lot/:id/:unique_id/supprimer
  param: { module: drev, action: drevDeleteLot }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_generatemouvements:
  url: /drev/generatemouvements/:id
  param: { module: drev, action: generateMouvementsFactures }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_update_commentaire:
  url: /drev/update-commentaire/:id
  param: { module: drev, action: updateCommentaire }
  class: DRevRoute
  options:
    model: DRev
    type: object
  requirements:
    sf_method: [post]

drev_validation:
  url: /drev/validation/:id
  param: { module: drev, action: validation }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_modificative:
  url: /drev/modificative/:id
  param: { module: drev, action: modificative }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_validation_admin:
  url: /drev/validation_admin/:id
  param: { module: drev, action: validationAdmin }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_enattente_admin:
  url: /drev/enattente/:id
  param: { module: drev, action: enattenteAdmin }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_confirmation:
  url: /drev/confirmation/:id
  param: { module: drev, action: confirmation }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_visualisation:
  url: /drev/visualisation/:id
  param: { module: drev, action: visualisation }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_vip2c:
  url: /drev/vip2c/:id
  param: { module: drev, action: vip2c }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_export_pdf:
  url: /drev/pdf/:id/:numero_dossier
  param: { module: drev, action: PDF, numero_dossier: null }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_export_xml:
  url: /drev/xml/:id
  param: { module: drev, action: XML }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_send_oi:
  url: /drev/oi/:id
  param: { module: drev, action: sendoi }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_switch_eleve:
  url: /drev/:id/:unique_id/eleve
  param: {module: drev, action: switchEleve}
  class: DRevRoute
  options:
    model:    DRev
    type:     object

drev_update_recolte:
  url: /drev/update/:id
  param: { module: drev, action: updateFromDocumentDouanier }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_declarvapi:
  url: /drev/declarvapi/:id
  param: { module: drev, action: declarvapi }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]
